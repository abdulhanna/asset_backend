import StatusCodes from "http-status-codes";
import createError from "http-errors-lite";
import {assert, assertEvery} from "../../../helpers/mad-assert";
import { masterTableColumnModel } from '../models';
import autoCodeGeneration from "../../../helpers/autoGeneratedCode";
import globalDetails from "../../../helpers/globalDetails";


const masterTableColumnService = {}

masterTableColumnService.createMasterTable = async (data, userRole, organizationId) => {


     const organizationName = await globalDetails.getOrganizationName(
         organizationId
     );

     const finalMSTCodeId = data.codeGenerationType === 'manual' ? data.tableID : await autoCodeGeneration.getmstCode(organizationName);
   if(userRole === 'superadmin')
   {
        const getExistingtable = await masterTableColumnModel.findOne({
             organizationId: organizationId,
             tableName: data.tableName,
             isDeleted: false,
        })

        assert(!getExistingtable, createError(StatusCodes.CONFLICT, "Table Name already exists"))

        const newMstTable = new masterTableColumnModel({
             organizationId: organizationId,
             codeGenerationType: data.codeGenerationType,
             tableId: finalMSTCodeId,
             tableName: data.tableName,
             applicableTo: data.applicableTo,
             applicableId: data.applicableId,
             fields: data.fields
        })
        const savedMstTable = await newMstTable.save();
        assert(
            savedMstTable,
            createError(StatusCodes.REQUEST_TIMEOUT, "Request Timeout")
        );

        return savedMstTable;

   }


};

masterTableColumnService.getallTable = async (userId) => {

     const alltable = await masterTableColumnModel.find();
     assert(alltable, createError(StatusCodes.REQUEST_TIMEOUT, "Request Timeout"));
     return alltable;
}


export default masterTableColumnService;