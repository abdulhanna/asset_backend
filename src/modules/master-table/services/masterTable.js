import StatusCodes from "http-status-codes";
import createError from "http-errors-lite";
import {assert, assertEvery} from "../../../helpers/mad-assert";
import { masterTableColumnModel } from '../models';
import autoCodeGeneration from "../../../helpers/autoGeneratedCode";
import globalDetails from "../../../helpers/globalDetails";
import ExcelJS from "exceljs";
import {secret} from "../../../config/secret";


const masterTableService = {}

///////// adding table column and generating sheet ///////////
masterTableService.createMasterTable = async (data, dashboardPermission, organizationId) => {

     const organizationName = await globalDetails.getOrganizationName(
         organizationId
     );

     const finalMSTCodeId = data.codeGenerationType === 'manual' ? data.tableID : await autoCodeGeneration.getmstCode(organizationName);
     const finalOrganizationId = dashboardPermission === 'root_dashboard' ? null : organizationId;


        const getExistingtable = await masterTableColumnModel.findOne({
             organizationId: finalOrganizationId,
             tableName: data.tableName,
             isDeleted: false,
        })

        assert(!getExistingtable, createError(StatusCodes.CONFLICT, "Table Name already exists"))

        const newMstTable = new masterTableColumnModel({
             organizationId: organizationId,
             codeGenerationType: data.codeGenerationType,
             tableId: finalMSTCodeId,
             tableName: data.tableName,
             applicableTo: data.applicableTo,
             applicableId: data.applicableId,
             fields: data.fields
        })
        const savedMstTableColumn = await newMstTable.save();
        assert(
            savedMstTableColumn,
            createError(StatusCodes.REQUEST_TIMEOUT, "Request Timeout")
        );

        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('MasterTable');

        // sheet headers
        const fields = savedMstTableColumn.fields;

        worksheet.addRow(fields.map(field => field.fieldName));

        // remove white space from table name
        const sampleFileName = savedMstTableColumn.tableName.split(" ").join("");

        // file path
        const excelFilePath = 'public/exports/masterTables/'+sampleFileName+'_'+'SampleFile'+'.xlsx';

        // Save the Excel file
       const fileCreated =  await workbook.xlsx.writeFile(excelFilePath);
       assert(!fileCreated, createError(StatusCodes.BAD_REQUEST, "Error in creating sample file for Master Table"))

        const fileUrl = secret.backend_baseURL+'/exports/masterTables/'+sampleFileName+'_'+'SampleFile'+'.xlsx';
        return  {'SampleFile':fileUrl};
};



////// get all table //////////

masterTableService.getallTable = async (userId) => {

     const alltable = await masterTableColumnModel.find();
     assert(alltable, createError(StatusCodes.REQUEST_TIMEOUT, "Request Timeout"));
     return alltable;
}


export default masterTableService;